{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\froman\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\fnil\fprq2\fcharset0 Noto Sans CJK SC Regular;}{\f6\fnil\fprq2\fcharset0 FreeSans;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green0\blue10;}
{\stylesheet{\s0\snext0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040 Normal;}
{\s1\sbasedon16\snext1\ilvl0\outlinelevel0\ql\widctlpar\li0\ri0\lin0\rin0\fi0\sb240\sa120\keepn\ltrpar\cf17\b\dbch\af5\langfe2052\dbch\af6\afs36\alang1081\ab\loch\f4\fs36\lang1040 Titolo 1;}
{\*\cs15\snext15\b\ab Enfasi forte;}
{\s16\sbasedon0\snext17\ql\widctlpar\sb240\sa120\keepn\ltrpar\cf17\dbch\af5\langfe2052\dbch\af6\afs28\alang1081\loch\f4\fs28\lang1040 Titolo;}
{\s17\sbasedon0\snext17\sl288\slmult1\ql\widctlpar\sb0\sa140\ltrpar\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1040 Corpo del testo;}
{\s18\sbasedon17\snext18\sl288\slmult1\ql\widctlpar\sb0\sa140\ltrpar\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1040 Elenco;}
{\s19\sbasedon0\snext19\ql\widctlpar\sb120\sa120\noline\ltrpar\cf17\i\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\ai\loch\f3\fs24\lang1040 Didascalia;}
{\s20\sbasedon0\snext20\ql\widctlpar\noline\ltrpar\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1040 Indice;}
{\s21\sbasedon16\snext21\qc\widctlpar\sb240\sa120\keepn\ltrpar\cf17\b\dbch\af5\langfe2052\dbch\af6\afs56\alang1081\ab\loch\f4\fs56\lang1040 Titolo principale;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-432\li432}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-576\li576}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-720\li720}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-864\li864}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1008\li1008}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1152\li1152}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1296\li1296}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1440\li1440}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1584\li1584}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-432\li432}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-576\li576}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-720\li720}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-864\li864}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1008\li1008}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1152\li1152}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1296\li1296}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1440\li1440}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1584\li1584}\listid2}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}{\*\generator LibreOffice/5.1.6.2$Linux_X86_64 LibreOffice_project/10m0$Build-2}{\info{\creatim\yr2018\mo3\dy19\hr11\min3}{\revtim\yr2018\mo3\dy19\hr21\min56}{\printim\yr0\mo0\dy0\hr0\min0}}\deftab709
\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Stile predefinito;}}
\formshade{\*\pgdscno0}\paperh16838\paperw11906\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep}\pgndec\pard\plain \s21\qc\widctlpar\sb240\sa120\keepn\ltrpar\cf17\b\dbch\af5\langfe2052\dbch\af6\afs56\alang1081\ab\loch\f4\fs56\lang1040\sb240\sa120{\cf13\rtlch \ltrch\loch
REPORT}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040\rtlch \ltrch\loch

\par \pard\plain \s1\ilvl0\outlinelevel0\ql\widctlpar\li0\ri0\lin0\rin0\fi0\sb240\sa120\keepn\ltrpar\cf17\b\dbch\af5\langfe2052\dbch\af6\afs36\alang1081\ab\loch\f4\fs36\lang1040{\listtext\pard\plain }\ilvl0\ls2 \li432\ri0\lin432\rin0\fi-432\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
(1) Description of the code}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040\rtlch \ltrch\loch

\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\b\ab\rtlch \ltrch\loch
[RR]}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\rtlch \ltrch\loch
The implementation of the round-robin policy is done by the means of a \u8220\'93ready queue\u8221\'94 in which processes are enqueued at the end of it immediately when they are created. The }{\i\ai\rtlch \ltrch\loch
timer_interrupt}{\rtlch \ltrch\loch
 }{\i0\ai0\rtlch \ltrch\loch
handler }{\rtlch \ltrch\loch
checks if the quantum of time of the running process is expired. In that case, a context switch is performed. The next process to be executed is chosen by the }{\i\ai\rtlch \ltrch\loch
scheduler.}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\rtlch \ltrch\loch
The scheduler dequeues the first process in the }{\i\ai\rtlch \ltrch\loch
ready_queue }{\rtlch \ltrch\loch
and returns a pointer to this process. The }{\i\ai\rtlch \ltrch\loch
activator }{\rtlch \ltrch\loch
performes the context switch.}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040\rtlch \ltrch\loch

\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\b\ab\rtlch \ltrch\loch
[RRF]}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\rtlch \ltrch\loch
For the implementation of different priorities two different queues are needed: }{\i\ai\rtlch \ltrch\loch
ready_queue }{\rtlch \ltrch\loch
and }{\i\ai\rtlch \ltrch\loch
high_priority_queue. }{\rtlch \ltrch\loch
The scheduler picks the process from the  }{\i\ai\rtlch \ltrch\loch
high_priority_queue }{\rtlch \ltrch\loch
(following the FIFO policy) until it is empty and then begins to dequeue from the  }{\i\ai\rtlch \ltrch\loch
ready_queue }{\rtlch \ltrch\loch
(low priority).}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040\rtlch \ltrch\loch

\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\b\ab\rtlch \ltrch\loch
[RRFN]}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\rtlch \ltrch\loch
The }{\i\ai\rtlch \ltrch\loch
read_network }{\rtlch \ltrch\loch
syscall can be used from threads to trigger a volountary context switch. This syscall saves the current context, enqueues the runnning process in the }{\i\ai\rtlch \ltrch\loch
waiting_queue }{\rtlch \ltrch\loch
and then calls the }{\i\ai\rtlch \ltrch\loch
scheduler }{\rtlch \ltrch\loch
to allow the next unblocked process to execute.}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\rtlch \ltrch\loch
The }{\i\ai\rtlch \ltrch\loch
network_interrupt }{\rtlch \ltrch\loch
function handles the case of receiving a signal from the network: it extracts the first process of the }{\i\ai\rtlch \ltrch\loch
waiting_queue }{\rtlch \ltrch\loch
(that is waiting for the network) and enqueues it in the right queue (high/low priority).}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040\rtlch \ltrch\loch

\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\ul\ulc0\rtlch \ltrch\loch
NOTE}{\ulnone\ulc0\rtlch \ltrch\loch
: The purpose of protecting regions of code with disable_interrupts is to avoid the situation in which an interrupt disrupts a system call, or an interrupt disrupts another interrupt handler.}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\ulnone\ulc0\rtlch \ltrch\loch
That\u8217\'92s why we put the control only in the last file.}{\ulnone\ulc0\b\ab\rtlch \ltrch\loch
 }{\cf13\ulnone\ulc0\b\ab\rtlch \ltrch\loch
[CHECK]}
\par \pard\plain \s1\ilvl0\outlinelevel0\ql\widctlpar\li0\ri0\lin0\rin0\fi0\sb240\sa120\keepn\ltrpar\cf17\b\dbch\af5\langfe2052\dbch\af6\afs36\alang1081\ab\loch\f4\fs36\lang1040\li0\ri0\lin0\rin0\fi0\rtlch \ltrch\loch

\par \pard\plain \s1\ilvl0\outlinelevel0\ql\widctlpar\li0\ri0\lin0\rin0\fi0\sb240\sa120\keepn\ltrpar\cf17\b\dbch\af5\langfe2052\dbch\af6\afs36\alang1081\ab\loch\f4\fs36\lang1040\pagebb{\listtext\pard\plain }\ilvl0\ls2 \li432\ri0\lin432\rin0\fi-432\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch
(2) Tests performed}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040\rtlch \ltrch\loch

\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\b\ab\rtlch \ltrch\loch
[RR]}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\rtlch \ltrch\loch
At first, our round robin crashed after all threads finished. We used gdb to help step through and find that the }{\i\ai\rtlch \ltrch\loch
running }{\i0\ai0\rtlch \ltrch\loch
and }{\i\ai\rtlch \ltrch\loch
current}{\i0\ai0\rtlch \ltrch\loch
 global variables were not getting updated after a thread exited. This meant that threads that had already finished (their state was FREE) were being put back into the }{\i\ai\rtlch \ltrch\loch
ready_queue}{\i0\ai0\rtlch \ltrch\loch
, and getting scheduled again.}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\i0\ai0\rtlch \ltrch\loch
To fix this, we added code to the }{\i\ai\rtlch \ltrch\loch
activator}{\i0\ai0\rtlch \ltrch\loch
 function that would update the global variables before performing the context switch.}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040\i0\ai0\rtlch \ltrch\loch

\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\b\ab\rtlch \ltrch\loch
[RRF]}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\cf13\b\ab\rtlch \ltrch\loch
This works perfectly.}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040\rtlch \ltrch\loch

\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\b\ab\rtlch \ltrch\loch
[RRFN]}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\rtlch \ltrch\loch
To test the behavior of the system under different loads, we created a file called }{\cs15\b\ab\rtlch \ltrch\loch
test_stress.c}{\rtlch \ltrch\loch
. The purpose of this file is to see what happens when the execution times of the processes is similar to the delay between the network interrupts. What we found was that when the network interrupts were infrequent, and the execution time of the process was quick, the idle process would run for several clock intervals. This is reasonable behavior, because while the blocked processes haven't finished, the system needs to wait.}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040{\rtlch \ltrch\loch
When the network interrupts happen frequently, and the processes run long, the idle process is not invoked as often. It still runs when the first thread blocks before creating any new threads, but after that there are enough threads in the ready queue to keep the CPU busy between network interrupts.}
\par \pard\plain \s0\ql\widctlpar\ltrpar\hyphpar0\cf17\dbch\af5\langfe2052\dbch\af6\afs24\alang1081\kerning1\loch\f3\fs24\lang1040\rtlch \ltrch\loch

\par \pard\plain \s1\ilvl0\outlinelevel0\ql\widctlpar\li0\ri0\lin0\rin0\fi0\sb240\sa120\keepn\ltrpar\cf17\b\dbch\af5\langfe2052\dbch\af6\afs36\alang1081\ab\loch\f4\fs36\lang1040\pagebb{\listtext\pard\plain }\ilvl0\ls2 \li432\ri0\lin432\rin0\fi-432\li0\ri0\lin0\rin0\fi0\sb240\sa120{\rtlch \ltrch\loch
(3) Conclusion}
\par }