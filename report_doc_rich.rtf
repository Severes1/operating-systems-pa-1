{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red128\green0\blue0;\red0\green0\blue10;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1134\margr1134\margb1134\margt1134\vieww25400\viewh14500\viewkind0
\deftab709
\pard\pardeftab709\sb240\sa120\qc\partightenfactor0

\f0\b\fs56 \cf2 REPORT\cf3 \
\pard\pardeftab709\partightenfactor0

\b0\fs24 \cf3 \
\pard\pardeftab709\ri-6\sb240\sa120\partightenfactor0
\ls1\ilvl0
\b\fs36 \cf3 (1) Description of the code\
\pard\pardeftab709\partightenfactor0

\b0\fs24 \cf3 \
\pard\pardeftab709\partightenfactor0

\b \cf3 [RR]
\b0 \
The implementation of the round-robin policy is done by the means of a \'93ready queue\'94 in which processes are enqueued at the end of it immediately when they are created. The 
\i timer_interrupt
\i0  handler checks if the quantum of time of the running process is expired. In that case, a context switch is performed. The next process to be executed is chosen by the 
\i scheduler.
\i0 \
The scheduler dequeues the first process in the 
\i ready_queue 
\i0 and returns a pointer to this process. The 
\i activator 
\i0 performes the context switch.\
\

\b [RRF]
\b0 \
For the implementation of different priorities two different queues are needed: 
\i ready_queue 
\i0 and 
\i high_priority_queue. 
\i0 The scheduler picks the process from the  
\i high_priority_queue 
\i0 (following the FIFO policy) until it is empty and then begins to dequeue from the  
\i ready_queue 
\i0 (low priority).\
\

\b [RRFN]
\b0 \
The 
\i read_network 
\i0 syscall can be used from threads to trigger a voluntary context switch. This syscall saves the current context, enqueues the running process in the 
\i waiting_queue 
\i0 and then calls the 
\i scheduler 
\i0 to allow the next unblocked process to execute.\
The 
\i network_interrupt 
\i0 function handles the case of receiving a signal from the network: it extracts the first process of the 
\i waiting_queue 
\i0 (that is waiting for the network) and enqueues it in the right queue (high/low priority).\
\
\pard\pardeftab709\partightenfactor0
\cf3 \ul \ulc0 NOTE\ulnone : The purpose of protecting regions of code with disable_interrupts is to avoid the situation in which an interrupt disrupts a system call, or an interrupt disrupts another interrupt handler.\
\pard\pardeftab709\partightenfactor0
\cf3 That\'92s why we put the control only in the last file, since it is the only file with multiple interrupt handlers (both timer and network). With only timer interrupts, it should not be the case that the timer interrupts itself. \
\pard\pardeftab709\partightenfactor0

\b\fs36 \cf3 \
\pard\pardeftab709\ri-6\sb240\sa120\partightenfactor0
\ls2\ilvl0\cf3 (2) Tests performed\
\pard\pardeftab709\partightenfactor0

\b0\fs24 \cf3 \
\pard\pardeftab709\partightenfactor0

\b \cf3 [RR]
\b0 \
At first, our round robin crashed after all threads finished. We used gdb to help step through and find that the 
\i running 
\i0 and 
\i current
\i0  global variables were not getting updated after a thread exited. This meant that threads that had already finished (their state was FREE) were being put back into the 
\i ready_queue
\i0 , and getting scheduled again.\
To fix this, we added code to the 
\i activator
\i0  function that would update the global variables before performing the context switch.\
\

\b [RRF]
\b0 \
To check that this file worked, we ran the main file, which creates a number of low and high priority threads. Thread 0 must be high priority, otherwise it would be preempted by the first high priority thread it creates. All the high priority threads run, and then all of the low priority threads run in a round-robin fashion. \
\

\b [RRFN]
\b0 \
To test the behavior of the system under different loads, we created a file called 
\b test_stress.c
\b0 . The purpose of this file is to see what happens when the execution times of the processes is similar to the delay between the network interrupts. What we found was that when the network interrupts were infrequent, and the execution time of the process was quick, the idle process would run for several clock intervals. This is reasonable behavior, because while the blocked processes haven't finished, the system needs to wait.\
When the network interrupts happen frequently, and the processes run long, the idle process is not invoked as often. It still runs when the first thread blocks before creating any new threads, but after that there are enough threads in the ready queue to keep the CPU busy between network interrupts.\
\
\pard\pardeftab709\ri-6\sb240\sa120\partightenfactor0
\ls3\ilvl0
\b\fs36 \cf3 (3) Conclusion\
\pard\pardeftab709\partightenfactor0

\b0\fs24 \cf3 The trickiest parts of this assignment were making sure that the finished threads were not enqueued, and that getcontext worked correctly. The manipulation of the global queues and running variables had to be done carefully with respect to interrupts.}